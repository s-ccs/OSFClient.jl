var documenterSearchIndex = {"docs":
[{"location":"osf_basics/#Basic-tutorial-of-functionality","page":"Tutorial","title":"Basic tutorial of functionality","text":"","category":"section"},{"location":"osf_basics/","page":"Tutorial","title":"Tutorial","text":"Let's assume you have an OSF project","category":"page"},{"location":"osf_basics/","page":"Tutorial","title":"Tutorial","text":"using OSFclient\nnode_id = \"hk9g4\"","category":"page"},{"location":"osf_basics/","page":"Tutorial","title":"Tutorial","text":"Let's get an overview of the available files","category":"page"},{"location":"osf_basics/","page":"Tutorial","title":"Tutorial","text":"str,df = OSFclient.traverse(node_id)\nstr","category":"page"},{"location":"osf_basics/","page":"Tutorial","title":"Tutorial","text":"We also get a dataframe df with all the info to download files","category":"page"},{"location":"osf_basics/","page":"Tutorial","title":"Tutorial","text":"df","category":"page"},{"location":"osf_basics/","page":"Tutorial","title":"Tutorial","text":"And download one folder","category":"page"},{"location":"osf_basics/","page":"Tutorial","title":"Tutorial","text":"\tsubset_to_download = df[df.kind .== \"file\" .&& contains.(df.folder,\"folderA2\"),:]\n\td  =OSFclient.download(tempdir()*\"/myfiles\",subset_to_download)\n    read(tempdir()*\"/myfiles/\"*subset_to_download.folder[1]) |> String","category":"page"},{"location":"osf_basics/","page":"Tutorial","title":"Tutorial","text":"You can also make a call to the api via:","category":"page"},{"location":"osf_basics/","page":"Tutorial","title":"Tutorial","text":"OSFclient.osf_api(node_id)","category":"page"},{"location":"osf_basics/","page":"Tutorial","title":"Tutorial","text":"OSFclient.osf_api(node_id;field=\"files\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = OSFclient","category":"page"},{"location":"#osfclient","page":"Home","title":"osfclient","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OSFclient.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [OSFclient]","category":"page"},{"location":"#OSFclient.download-Tuple{Any, DataFrames.DataFrameRow}","page":"Home","title":"OSFclient.download","text":"download(id)\n\nDownload an OSF id, returns the body of HTTP.get\n\ndownload(save_folder,df::DataFrameRow)\ndownload(save_folder,df::DataFrame)\n\nDownloads all df.id's to their respective save_folder * df.folder.\n\nkeywordargs\n\noverwrite (Bool=false) - flag to overwrite already existing files.\n\n\n\n\n\n","category":"method"},{"location":"#OSFclient.get_attr-Tuple{Any}","page":"Home","title":"OSFclient.get_attr","text":"get_attr(data)\n\nreturns name, kind, id and folder (either name or materialized_path)\n\n\n\n\n\n","category":"method"},{"location":"#OSFclient.osf_api-Tuple{Any}","page":"Home","title":"OSFclient.osf_api","text":"osf_api(id;kwargs...)\n\nusing Base: isfieldatomic     osf_api(url;kwargs...) helper to make requests against the osf api. \n\n##args id/url: osf-id, e.g. 3a7kt or url containing \"https://api.osf.io/v2/\"\n\nkwargs\n\nfield: is put at v2/type/id/*field* type: is put at v2/*type* parse: if other than json returns the HTTP.get, else is converted to String and parsed with JSON.json\n\nif parse == \"json\" (default), received data is put to string and parsed as json\n\n\n\n\n\n","category":"method"},{"location":"#OSFclient.traverse-Tuple{Any}","page":"Home","title":"OSFclient.traverse","text":"traverse(nodeid)\n\ntraverses all folders and copies information about the data. Recurrent function is called traverse!\n\n\n\n\n\n","category":"method"}]
}
